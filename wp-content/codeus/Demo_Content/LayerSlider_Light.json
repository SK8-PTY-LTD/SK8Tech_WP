[{"properties":{"post_type":["team"],"post_categories":["1"],"post_tags":["19"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Test","width":"100%","height":"470","maxwidth":"","responsiveunder":"1280","sublayercontainer":"1280","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"noskin","backgroundcolor":"#f0f4f7","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"5","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"7000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Background","media":"img","type":"p","imageId":"3273","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_1.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"120\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"4000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{}","top":"-120","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background Parallax Stars","media":"img","type":"p","imageId":"3272","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/stars-parallax.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"490\\\",\\\"durationin\\\":\\\"3600\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"4000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2.5\\\",\\\"scaleyout\\\":\\\"2.5\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"-490","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Star-Big-Parallax","media":"img","type":"p","imageId":"3777","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/star-big-parallax1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"1800\\\",\\\"durationin\\\":\\\"1300\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"0\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-900","left":"75%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Star-Big-Parallax copy","media":"img","type":"p","imageId":"3777","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/star-big-parallax1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"1800\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1800\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"5\\\",\\\"scaleyin\\\":\\\"4\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"0\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-900","left":"25%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Planet","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"300\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutQuad\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"100px\\\",\\\"durationout\\\":\\\"4000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3\\\",\\\"scaleyout\\\":\\\"3\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"530px\\\",\\\"height\\\":\\\"530px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"265px\\\"}","top":"360px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Star 1","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"5px\\\",\\\"height\\\":\\\"5px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star1_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 2","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"22px\\\",\\\"height\\\":\\\"22px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"11px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star2_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 3","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"11px\\\",\\\"height\\\":\\\"11px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"6px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star3_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"10px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"5px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star4_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"15px\\\",\\\"height\\\":\\\"15px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star5_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 6","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"16px\\\",\\\"height\\\":\\\"16px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"8px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star6_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 7","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"6px\\\",\\\"height\\\":\\\"6px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star7_orbit","title":"","alt":"","rel":""},{"subtitle":"Star 8","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"13px\\\",\\\"height\\\":\\\"13px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"625px","left":"50%","style":"","id":"","class":"star8_orbit","title":"","alt":"","rel":""},{"subtitle":"Welcome","media":"html","type":"div","imageId":"","image":"","html":"Welcome","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"0% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"6\\\",\\\"scaleyout\\\":\\\"6\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"85px\\\",\\\"line-height\\\":\\\"115px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"120px","left":"253px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"to","media":"html","type":"div","imageId":"","image":"","html":"to","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1400\\\",\\\"delayin\\\":\\\"1800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"6\\\",\\\"scaleyout\\\":\\\"6\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"85px\\\",\\\"line-height\\\":\\\"115px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"120px","left":"602px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Codeus","media":"html","type":"div","imageId":"","image":"","html":"<span style=\\\"color: #71dfca; background-color: rgba(0, 0, 0, 0.6);padding: 0 20px;\\\">CODEUS<\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1300\\\",\\\"delayin\\\":\\\"2300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"150\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"6\\\",\\\"scaleyout\\\":\\\"6\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"85px\\\",\\\"line-height\\\":\\\"115px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"120px","left":"684px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text Small Draft","media":"html","type":"div","imageId":"","image":"","html":"New <span style=\\\"color: #48afdb;\\\">SUPERGIANT<\/span> in the galaxy of premium WP themes! <br \/>\r\n<span style=\\\"color: #71dfca;\\\">EVERYTHING<\/span> you ever needed to build powerful & trendy website!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"4600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"right\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.0\\\",\\\"scaleyout\\\":\\\"1.0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"250px","left":"50%","wordwrap":"on","style":"text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2 copy","media":"html","type":"div","imageId":"","image":"","html":"New <span style=\\\"color: #48afdb;\\\">SUPERGIANT<\/span> in the galaxy","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"-500\\\",\\\"offsetyout\\\":\\\"-350\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3\\\",\\\"scaleyout\\\":\\\"3\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"250px","left":"289px","wordwrap":"on","style":"text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2 copy copy","media":"html","type":"div","imageId":"","image":"","html":"of premium WP themes!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"500\\\",\\\"offsetyout\\\":\\\"-350\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3.5\\\",\\\"scaleyout\\\":\\\"3.5\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"250px","left":"690px","wordwrap":"on","style":"text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2 copy copy copy","media":"html","type":"div","imageId":"","image":"","html":"<span style=\\\"color: #71dfca;\\\">EVERYTHING<\/span> you ever needed","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"-550\\\",\\\"offsetyout\\\":\\\"-120\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-10\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3.5\\\",\\\"scaleyout\\\":\\\"3.5\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"290px","left":"230px","wordwrap":"on","style":"text-align: center;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2 copy copy copy copy","media":"html","type":"div","imageId":"","image":"","html":"to build powerful & trendy website!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"3200\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.0\\\",\\\"scaleyin\\\":\\\"1.0\\\",\\\"offsetxout\\\":\\\"550\\\",\\\"offsetyout\\\":\\\"-120\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInExpo\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"10\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"3.5\\\",\\\"scaleyout\\\":\\\"3.5\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"290px","left":"623px","wordwrap":"on","style":"text-align: center;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"104","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"5000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Draft Back","media":"img","type":"p","imageId":"3275","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slide2_draft.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background","media":"img","type":"p","imageId":"3279","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_2.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Gymnast","media":"img","type":"p","imageId":"3280","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/gymnast1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-120\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"-87px","left":"715px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Postage Big","media":"img","type":"p","imageId":"3278","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/marka2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1700\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"7\\\"}","url":"","target":"_self","styles":"{}","top":"-69px","left":"232px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Postage Small","media":"img","type":"p","imageId":"3277","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/marka1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"320\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-360\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"230px","left":"1147px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 6","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"17px\\\",\\\"height\\\":\\\"17px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"10px\\\"}","top":"255px","left":"650px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-700\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"10px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"370px","left":"1115px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-800\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"4px\\\",\\\"height\\\":\\\"4px\\\",\\\"border-top\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-right\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-bottom\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-left\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"440px","left":"1175px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 3","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"1400\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-900\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"12px\\\",\\\"height\\\":\\\"12px\\\",\\\"border-top\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-right\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-bottom\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-left\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-radius\\\":\\\"7px\\\"}","top":"440px","left":"720px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 2","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-1000\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"6px\\\",\\\"height\\\":\\\"6px\\\",\\\"border-top\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-right\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-bottom\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-left\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-radius\\\":\\\"10px\\\"}","top":"290px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 1","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"right\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"1600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-700\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"10\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"26px\\\",\\\"height\\\":\\\"26px\\\",\\\"border-top\\\":\\\"1px solid #48afdb;\\\",\\\"border-right\\\":\\\"1px solid #48afdb;\\\",\\\"border-bottom\\\":\\\"1px solid #48afdb;\\\",\\\"border-left\\\":\\\"1px solid #48afdb;\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"35px","left":"710px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt1","media":"html","type":"p","imageId":"","image":"","html":"Ultra-Flexible","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"680\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"83px\\\",\\\"line-height\\\":\\\"115px\\\",\\\"color\\\":\\\"#6597fe\\\"}","top":"112px","left":"47px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt1 copy","media":"html","type":"p","imageId":"","image":"","html":"Page-Layouts","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"580\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"80\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"83px\\\",\\\"line-height\\\":\\\"115px\\\",\\\"color\\\":\\\"#48afdb\\\"}","top":"210px","left":"47px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2","media":"html","type":"p","imageId":"","image":"","html":"Stunning variety of page layouts for any needs.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"480\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"70\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-20\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"343px","left":"54px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2 copy","media":"html","type":"p","imageId":"","image":"","html":"Unlimited customization options.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"380\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"60\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-10\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"383px","left":"54px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2 copy copy","media":"html","type":"p","imageId":"","image":"","html":"Codeus is a champion!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"380\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"50\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-5\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"423px","left":"54px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"5300","timeshift":"300","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Back Draft","media":"img","type":"p","imageId":"3283","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slide3_draft.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"0px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background","media":"img","type":"p","imageId":"3284","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_3.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutSine\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 8 BF","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-300\\\",\\\"offsetyin\\\":\\\"30\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"8px\\\",\\\"height\\\":\\\"8px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"10px\\\"}","top":"300px","left":"715px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 7 BF","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-400\\\",\\\"offsetyin\\\":\\\"-20\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"15px\\\",\\\"height\\\":\\\"15px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"10px\\\"}","top":"370px","left":"805px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 6 WO","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-40\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"3px\\\",\\\"height\\\":\\\"3px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"10px\\\"}","top":"95px","left":"435px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 5 WO","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-20\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"7px\\\",\\\"height\\\":\\\"7px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"10px\\\"}","top":"130px","left":"385px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 4 WO","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"21px\\\",\\\"height\\\":\\\"21px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"11px\\\"}","top":"55px","left":"305px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 3 WO","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-600\\\",\\\"offsetyin\\\":\\\"450\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-12\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"500px\\\",\\\"height\\\":\\\"500px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"300px\\\"}","top":"-445px","left":"730px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 2 WO","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-80\\\",\\\"offsetyin\\\":\\\"40\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.5\\\",\\\"scaleyin\\\":\\\"0.5\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"150px\\\",\\\"height\\\":\\\"150px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"100px\\\"}","top":"175px","left":"475px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 1 BO","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-60\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.5\\\",\\\"scaleyin\\\":\\\"0.5\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"36px\\\",\\\"height\\\":\\\"36px\\\",\\\"border-top\\\":\\\"1px solid #48afdb;\\\",\\\"border-right\\\":\\\"1px solid #48afdb;\\\",\\\"border-bottom\\\":\\\"1px solid #48afdb;\\\",\\\"border-left\\\":\\\"1px solid #48afdb;\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"330px","left":"660px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Cargo Shadow","media":"img","type":"p","imageId":"3666","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/cargo_shadow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"swing\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"415px","left":"-30px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Cargo","media":"img","type":"p","imageId":"3667","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/cargo1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"-200\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutBounce\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-2\\\",\\\"skewyin\\\":\\\"2\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"20\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"84px","left":"38px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt1","media":"html","type":"p","imageId":"","image":"","html":"Tons Of Useful Features","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2100\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"59px","left":"460px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt1 copy","media":"html","type":"p","imageId":"","image":"","html":"And Shortcodes","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2200\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"156px","left":"700px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2","media":"html","type":"p","imageId":"","image":"","html":"Codeus brings you a plenty of handy","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2300\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"260px","left":"772px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2 copy","media":"html","type":"p","imageId":"","image":"","html":"options. Build your pages within minutes","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-10\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"300px","left":"730px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2 copy copy","media":"html","type":"p","imageId":"","image":"","html":"and get the most out of them!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-20\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"40px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"340px","left":"860px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Button 1","media":"html","type":"p","imageId":"","image":"","html":"<a href=\\\"#\\\" class=\\\"button\\\" style=\\\"background-color: #3a8a9a;\\\">DETAILED INFO<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"-50\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1400\\\",\\\"easingin\\\":\\\"easeOutBounce\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-3\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2600\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-1\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"380px","left":"775px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Button 2","media":"html","type":"p","imageId":"","image":"","html":"<a href=\\\"#\\\" class=\\\"button\\\" style=\\\"background-color: #71c084;\\\">PURCHASE NOW<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"-50\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutBounce\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-2\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2900\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-4\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"380px","left":"1005px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"5500","timeshift":"500","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Draft Back","media":"img","type":"p","imageId":"3332","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slide4_draft.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background","media":"img","type":"p","imageId":"3334","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_4.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutSine\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Box","media":"img","type":"p","imageId":"3335","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/box.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"250\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.1\\\",\\\"scaleyin\\\":\\\"0.1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"250\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"7px","left":"722px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 8","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-80\\\",\\\"offsetyin\\\":\\\"120\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.5\\\",\\\"scaleyin\\\":\\\"0.5\\\",\\\"offsetxout\\\":\\\"-650\\\",\\\"offsetyout\\\":\\\"-200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"28px\\\",\\\"height\\\":\\\"28px\\\",\\\"background\\\":\\\"#fff\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"75px","left":"1020px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 7","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-80\\\",\\\"offsetyin\\\":\\\"60\\\",\\\"durationin\\\":\\\"700\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-630\\\",\\\"offsetyout\\\":\\\"-200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"6px\\\",\\\"height\\\":\\\"6px\\\",\\\"background\\\":\\\"#fff\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"135px","left":"1015px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 6","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"120\\\",\\\"offsetyin\\\":\\\"50\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.7\\\",\\\"scaleyin\\\":\\\"0.7\\\",\\\"offsetxout\\\":\\\"-640\\\",\\\"offsetyout\\\":\\\"-200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"17px\\\",\\\"height\\\":\\\"17px\\\",\\\"background\\\":\\\"#fff\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"115px","left":"785px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"70\\\",\\\"durationin\\\":\\\"800\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-620\\\",\\\"offsetyout\\\":\\\"-200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"7px\\\",\\\"height\\\":\\\"7px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"90px","left":"870px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-190\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-630\\\",\\\"offsetyout\\\":\\\"-150\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-3\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"7px\\\",\\\"height\\\":\\\"7px\\\",\\\"border-top\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-right\\\":\\\"1px solid #3b3e4f\\\",\\\"border-bottom\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-left\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"35px","left":"1155px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 3","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-610\\\",\\\"offsetyout\\\":\\\"-250\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"21px\\\",\\\"height\\\":\\\"21px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"110px","left":"1110px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 2","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"130\\\",\\\"offsetyin\\\":\\\"150\\\",\\\"durationin\\\":\\\"1700\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-640\\\",\\\"offsetyout\\\":\\\"-300\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"13px\\\",\\\"height\\\":\\\"13px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"22px","left":"822px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 1","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"230\\\",\\\"offsetyin\\\":\\\"140\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0.5\\\",\\\"scaleyin\\\":\\\"0.5\\\",\\\"offsetxout\\\":\\\"-630\\\",\\\"offsetyout\\\":\\\"-350\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"43px\\\",\\\"height\\\":\\\"43px\\\",\\\"border-top\\\":\\\"1px solid #48afdb;\\\",\\\"border-right\\\":\\\"1px solid #48afdb;\\\",\\\"border-bottom\\\":\\\"1px solid #48afdb;\\\",\\\"border-left\\\":\\\"1px solid #48afdb;\\\",\\\"border-radius\\\":\\\"25px\\\"}","top":"15px","left":"655px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Cursor","media":"img","type":"p","imageId":"3344","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/cursor.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"700\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"700\\\",\\\"offsetyout\\\":\\\"200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{}","top":"330px","left":"1130px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 1","media":"html","type":"p","imageId":"","image":"","html":"Ready-To-Go","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"130\\\",\\\"offsetyin\\\":\\\"-150\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-200\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#48afdb\\\"}","top":"128px","left":"49px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 1 copy","media":"html","type":"p","imageId":"","image":"","html":"With Just Few Clicks","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"170\\\",\\\"offsetyin\\\":\\\"-100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"35\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-150\\\",\\\"durationout\\\":\\\"2300\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-25\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.7\\\",\\\"scaleyout\\\":\\\"1.7\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#9bca4a\\\"}","top":"225px","left":"49px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2","media":"html","type":"p","imageId":"","image":"","html":"Codeus Is Configured For Working Out-Of-The-Box,","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"170\\\",\\\"offsetyin\\\":\\\"-50\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"25\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-100\\\",\\\"durationout\\\":\\\"2600\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-15\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.3\\\",\\\"scaleyout\\\":\\\"1.3\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"335px","left":"52px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2 copy","media":"html","type":"p","imageId":"","image":"","html":"Supplied With Skins, Icons & Backgrounds","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"140\\\",\\\"offsetyin\\\":\\\"-20\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"15\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-50\\\",\\\"durationout\\\":\\\"2900\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-5\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"375px","left":"52px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"5500","timeshift":"500","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Draft Back","media":"img","type":"p","imageId":"3396","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slide5_draft_02.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background","media":"img","type":"p","imageId":"3397","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_5.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutSine\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 1","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-10\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"600\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-5\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"13px\\\",\\\"height\\\":\\\"13px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"15px","left":"810px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 2","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-30\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"700\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"8px\\\",\\\"height\\\":\\\"8px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"300px","left":"925px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 3","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-60\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"700\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"4px\\\",\\\"height\\\":\\\"4px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"383px","left":"1133px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"7px\\\",\\\"height\\\":\\\"7px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"50px","left":"660px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-60\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"700\\\",\\\"delayin\\\":\\\"1400\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"20px\\\",\\\"height\\\":\\\"20px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"425px","left":"1140px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Comp","media":"img","type":"p","imageId":"3468","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-150\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-190\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-150\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"190\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{}","top":"130px","left":"310px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Dia","media":"img","type":"p","imageId":"3467","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"50\\\",\\\"rotatexin\\\":\\\"50\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-50\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"350px","left":"500px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Book","media":"img","type":"p","imageId":"3470","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-60\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"80\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"60\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"-60px","left":"360px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Phone","media":"img","type":"p","imageId":"3471","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-600\\\",\\\"offsetyin\\\":\\\"300\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"100\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"300\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-100\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"265px","left":"90px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Glass","media":"img","type":"p","imageId":"3469","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"800\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-70\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"70\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"385px","left":"310px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Cup","media":"img","type":"p","imageId":"3472","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"50\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"1400\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-2500\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"1000\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"180px","left":"200px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Tablet","media":"img","type":"p","imageId":"3473","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El7.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-30\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"700\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-40\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-30\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"40\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"10px","left":"180px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"El Calc","media":"img","type":"p","imageId":"3474","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El8.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"left\\\",\\\"offsetyin\\\":\\\"-300\\\",\\\"durationin\\\":\\\"1800\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"120\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-300\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-120\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"-30px","left":"40px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Gear Small","media":"img","type":"p","imageId":"3475","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El9.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"30\\\",\\\"offsetyin\\\":\\\"250\\\",\\\"durationin\\\":\\\"5000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-5000\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"30\\\",\\\"offsetyout\\\":\\\"250\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"290px","left":"735px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Gear Big","media":"img","type":"p","imageId":"3476","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Slide5_El10.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"40\\\",\\\"offsetyin\\\":\\\"200\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-120\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"40\\\",\\\"offsetyout\\\":\\\"200\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{}","top":"330px","left":"780px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 1","media":"html","type":"p","imageId":"","image":"","html":"Powerful Admin Panel","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-50\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-60\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"60px","left":"520px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2","media":"html","type":"p","imageId":"","image":"","html":"Based on CodeXTuner Framework.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"40\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"850\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-30\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"170px","left":"790px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2 copy","media":"html","type":"p","imageId":"","image":"","html":"Freedom of creativity. No limits in website","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"40\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-10\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"10\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"210px","left":"720px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2 copy copy","media":"html","type":"p","imageId":"","image":"","html":"customization. Simple & clever.","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"40\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1200\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"30\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-5\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"250px","left":"842px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Button","media":"html","type":"p","imageId":"","image":"","html":"<a href=\\\"#\\\" class=\\\"button\\\" style=\\\"background-color: #723362;\\\">PURCHASE NOW<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"40\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1100\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"60\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-15\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"280px","left":"1005px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"5300","timeshift":"300","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Draft Back","media":"img","type":"p","imageId":"3477","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slide6_draft.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background","media":"img","type":"p","imageId":"3478","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_6.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutSine\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Shadow Bottom","media":"img","type":"p","imageId":"3623","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/screen_shadow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-80\\\",\\\"offsetyin\\\":\\\"-40\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"-40\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"260px","left":"490px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Shadow Top","media":"img","type":"p","imageId":"3623","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/screen_shadow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-80\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"-80\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"-90px","left":"830px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Screenshot Bottom","media":"img","type":"p","imageId":"3621","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/screen_1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-295\\\",\\\"offsetyin\\\":\\\"295\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-295\\\",\\\"offsetyout\\\":\\\"295\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{}","top":"180px","left":"437px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Screenshot Top","media":"img","type":"p","imageId":"3622","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/screen_2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"260\\\",\\\"offsetyin\\\":\\\"-260\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"260\\\",\\\"offsetyout\\\":\\\"-260\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{}","top":"-12px","left":"785px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Corner Bottom","media":"img","type":"p","imageId":"3619","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/corner_dark.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-85\\\",\\\"offsetyin\\\":\\\"85\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-85\\\",\\\"offsetyout\\\":\\\"85\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"376px","left":"910px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Corner Top","media":"img","type":"p","imageId":"3620","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/corner_dark_2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"63\\\",\\\"offsetyin\\\":\\\"-63\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"63\\\",\\\"offsetyout\\\":\\\"-63\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"-10px","left":"437px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 6","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-438\\\",\\\"offsetyin\\\":\\\"438\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"-50\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"7px\\\",\\\"height\\\":\\\"7px\\\",\\\"border-top\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-right\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-bottom\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-left\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-radius\\\":\\\"13px\\\"}","top":"40px","left":"690px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-120\\\",\\\"offsetyin\\\":\\\"120\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"950\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"430\\\",\\\"offsetyout\\\":\\\"-430\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"7\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"25px\\\",\\\"height\\\":\\\"25px\\\",\\\"border-top\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-right\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-bottom\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-left\\\":\\\"1px solid #3b3e4f;\\\",\\\"border-radius\\\":\\\"13px\\\"}","top":"375px","left":"1147px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-296\\\",\\\"offsetyin\\\":\\\"296\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"250\\\",\\\"offsetyout\\\":\\\"-250\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"18px\\\",\\\"height\\\":\\\"18px\\\",\\\"background\\\":\\\"#fff\\\",\\\"border-radius\\\":\\\"9px\\\"}","top":"180px","left":"1180px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 3","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-433\\\",\\\"offsetyin\\\":\\\"433\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1050\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"60\\\",\\\"offsetyout\\\":\\\"-60\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"14px\\\",\\\"height\\\":\\\"14px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"8px\\\"}","top":"47px","left":"755px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 1","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-340\\\",\\\"offsetyin\\\":\\\"340\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"160\\\",\\\"offsetyout\\\":\\\"-160\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"6px\\\",\\\"height\\\":\\\"6px\\\",\\\"background\\\":\\\"#ff5373\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"140px","left":"720px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 2","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-170\\\",\\\"offsetyin\\\":\\\"170\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1150\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"350\\\",\\\"offsetyout\\\":\\\"-350\\\",\\\"durationout\\\":\\\"800\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"10px\\\",\\\"background\\\":\\\"#ff5373\\\",\\\"border-radius\\\":\\\"8px\\\"}","top":"315px","left":"1090px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 1","media":"html","type":"p","imageId":"","image":"","html":"<span style=\\\"color: #ff5373;\\\">Top-Notch<\/span> Design","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"-100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-50\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"50\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-4\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"85px\\\"}","top":"90px","left":"43px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2","media":"html","type":"p","imageId":"","image":"","html":"From award-winning designer <a href=\\\"http:\/\/themeforest.net\/user\/Kontramax?ref=kontramax\\\" target=\\\"_blank\\\" style=\\\"color: #ff5373; text-decoration: none;\\\">Kontramax<\/a>!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"-50\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"400\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-25\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"-100\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"25\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"210px","left":"52px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2 copy","media":"html","type":"p","imageId":"","image":"","html":"Trendy, flat, clean, tasty, creative","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-5\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"5\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"250px","left":"52px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt 2 copy copy","media":"html","type":"p","imageId":"","image":"","html":"\u2013 the COOLEST design ever!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"50\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"15\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"100\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-15\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#3b3e4f\\\"}","top":"290px","left":"52px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Button","media":"html","type":"p","imageId":"","image":"","html":"<a href=\\\"#\\\" class=\\\"button\\\" style=\\\"background-color: #3a5370;\\\">PURCHASE NOW<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"35\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"left\\\",\\\"offsetyout\\\":\\\"200\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"324px","left":"54px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"5300","timeshift":"300","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Draft Back","media":"img","type":"p","imageId":"3479","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slide7_draft.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","skip":"on","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Background","media":"img","type":"p","imageId":"3480","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/slider_background_7.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutSine\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"50%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Tablet","media":"img","type":"p","imageId":"3638","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/tablet_mockup.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-50\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"167px","left":"-80px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Phone Shadow","media":"img","type":"p","imageId":"3640","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/phone_shadow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"100\\\",\\\"durationout\\\":\\\"100\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{}","top":"240px","left":"140px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Phone","media":"img","type":"p","imageId":"3639","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/phone_mockup.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1400\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":false,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"500\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"165px","left":"125px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Corner Top","media":"img","type":"p","imageId":"3625","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/corner_light_2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"top\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"-30px","left":"-35px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Corner Bottom","media":"img","type":"p","imageId":"3624","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/corner_light_1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"700\\\",\\\"delayin\\\":\\\"1400\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"415px","left":"795px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 1","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"13px\\\",\\\"height\\\":\\\"13px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"11px\\\"}","top":"33px","left":"552px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 2","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"4px\\\",\\\"height\\\":\\\"4px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"11px\\\"}","top":"120px","left":"485px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 3","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"4px\\\",\\\"height\\\":\\\"4px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"11px\\\"}","top":"325px","left":"755px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"800\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-7\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"25px\\\",\\\"height\\\":\\\"25px\\\",\\\"border-top\\\":\\\"1px solid #fff;\\\",\\\"border-right\\\":\\\"1px solid #fff;\\\",\\\"border-bottom\\\":\\\"1px solid #fff;\\\",\\\"border-left\\\":\\\"1px solid #fff;\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"390px","left":"775px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"8px\\\",\\\"height\\\":\\\"8px\\\",\\\"background\\\":\\\"#48afdb\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"93px","left":"450px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Round 6","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":false,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"top\\\",\\\"durationout\\\":\\\"700\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"13px\\\",\\\"height\\\":\\\"13px\\\",\\\"background\\\":\\\"#60dbc4\\\",\\\"border-radius\\\":\\\"15px\\\"}","top":"335px","left":"675px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt1","media":"html","type":"p","imageId":"","image":"","html":"Flexible Responsive","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"400\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"5\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-1000\\\",\\\"durationout\\\":\\\"30\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"40\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"600\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-3\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"34px","left":"592px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt1 copy","media":"html","type":"p","imageId":"","image":"","html":"<span style=\\\"color: #71dfca; background-color: rgba(58, 83, 112, 0.6);padding: 0 20px;\\\">Multi-Purpose Theme<\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"10\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-1000\\\",\\\"durationout\\\":\\\"300\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"35\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"500\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"80px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"130px","left":"515px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2 copy","media":"html","type":"p","imageId":"","image":"","html":"Enjoy Beauty Of Codeus. Powerful Multi-Purpose","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"15\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-1000\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"30\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"400\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"248px","left":"630px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Txt2","media":"html","type":"p","imageId":"","image":"","html":"Theme With Clean Business Style","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"700\\\",\\\"easingin\\\":\\\"easeOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-1000\\\",\\\"durationout\\\":\\\"1200\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"25\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"300\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Aileron Thin\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"288px","left":"813px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Button","media":"html","type":"p","imageId":"3667","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/cargo1.png","html":"<a href=\\\"#\\\" class=\\\"button\\\" style=\\\"background-color: #fa566e;\\\">PURCHASE NOW<\/a>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"-80\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1100\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-10\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-1000\\\",\\\"durationout\\\":\\\"2400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"200\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"327px","left":"1006px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"post_type":["attachment"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"LayerSlider 5 responsive demo slider","width":"1280","height":"720","responsive":"on","maxwidth":"1280","responsiveunder":"0","sublayercontainer":"0","autostart":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","skin":"v5","backgroundcolor":"","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: -10px; top: -10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) {\r\n\r\n}","cbstart":"function(data) {\r\n\r\n}","cbstop":"function(data) {\r\n\r\n}","cbpause":"function(data) {\r\n\r\n}","cbanimstart":"function(data) {\r\n\r\n}","cbanimstop":"function(data) {\r\n\r\n}","cbprev":"function(data) {\r\n\r\n}","cbnext":"function(data) {\r\n\r\n}"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"75,79","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"fading background","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/bg21.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"6000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"kreatura media","media":"text","type":"h1","imageId":"","image":"","html":"KREATURA MEDIA","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"40\\\",\\\"color\\\":\\\"#286e89\\\"}","top":"60px","left":"800px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"presents","media":"text","type":"h2","imageId":"","image":"","html":"presents","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-60\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"60\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#fa6b4b\\\"}","top":"100","left":"801","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-1","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-d-5-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right -50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"450px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-2","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-d-5-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left -50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"450px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-3","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-d-5-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"1\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"300px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-4","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-d-5-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"300px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-5","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-d-5-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right 150% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-6","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-d-5-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 150% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"layerslider","media":"text","type":"h1","imageId":"","image":"","html":"LAYERSLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"340px\\\",\\\"font-family\\\":\\\"Oswald, Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"#a14730\\\",\\\"border-radius\\\":\\\"5px\\\"}","top":"65px","left":"80px","style":"font-weight: 500; text-align: center; opacity: .5;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"dynamic slider","media":"text","type":"p","imageId":"","image":"","html":"DYNAMIC SLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"150px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"from your","media":"text","type":"p","imageId":"","image":"","html":"from your <span style=\\\"font-weight: 500; color: #555;\\\">WordPress posts<\/span> and pages","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"190px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"timeline","media":"text","type":"p","imageId":"","image":"","html":"TIMELINE VIEW","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"250px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for better","media":"text","type":"p","imageId":"","image":"","html":"for better timings","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"290px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"new transitions","media":"text","type":"p","imageId":"","image":"","html":"NEW TRANSITIONS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"350px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"transitions","media":"text","type":"p","imageId":"","image":"","html":"slide, fade, scale, skew and rotate layers even in 3D","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"390px","left":"499px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"interface revamp","media":"text","type":"p","imageId":"","image":"","html":"INTERFACE REVAMP","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"450px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for easy and clear work","media":"text","type":"p","imageId":"","image":"","html":"working with the plugin is more easy","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5800\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"490px","left":"499px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"5","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/bg4.jpg","thumbnailId":"","thumbnail":"","slidedelay":"9500","timeshift":"-3000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"&","media":"text","type":"p","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"200px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"-17px","left":"915px","style":"opacity: .3; font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"responsive","media":"text","type":"h1","imageId":"","image":"","html":"RESPONSIVE","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"40\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"60px","left":"800px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"mobile ready","media":"text","type":"h2","imageId":"","image":"","html":"mobile ready","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-60\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"60\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#286e89\\\"}","top":"100","left":"801","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"version","media":"text","type":"h1","imageId":"","image":"","html":"VERSION","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"450\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, HelveticaNeue-UltraLight, HelveticaNeue-Light, HelveticaNeue, Helvetica, Arial, serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"497px","left":"788px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5","media":"text","type":"h3","imageId":"","image":"","html":"5","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"450\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"400\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"220px","left":"912px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"text left half","media":"text","type":"h1","imageId":"","image":"","html":"<span style=\\\"color: #286e89;\\\">WITH HUGE<\/span><br>AND","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"461px","left":"767px","style":"font-weight: 300; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"text right half","media":"text","type":"h3","imageId":"","image":"","html":"<span style=\\\"color: #286e89;\\\">PERFORMANCE<\/span><br>FEATURE UPDATE","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"461px","left":"943px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"tablet","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-a-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"2010\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"765px\\\"}","top":"180px","left":"-82px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slider shadow","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-a-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"2010\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"495px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slide one","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-a-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"275px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slide two","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-a-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"275px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touch","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-a-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1\\\",\\\"delayin\\\":\\\"3498\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"10\\\",\\\"scaleyout\\\":\\\"10\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"476px","left":"436px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touching hand","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-a-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"475px","left":"383px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph performance v5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"400px\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"180px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph performance v4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"50px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"530px","left":"590px","style":"opacity: .5","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"8x performance","media":"text","type":"p","imageId":"","image":"","html":"8x<br>performance","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"line-height\\\":\\\"25px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"589px","left":"533px","style":"font-style: italic; text-align: center; font-weight: 500; opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph features v5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"200px\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"380px","left":"410px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph features v4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"50px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"530px","left":"390px","style":"opacity: .5","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"many new features","media":"text","type":"p","imageId":"","image":"","html":"many new<br>features","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"line-height\\\":\\\"25px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"589px","left":"349px","style":"font-style: italic; text-align: center; font-weight: 500; opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-responsive.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"520px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-layers.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"450px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-mobile.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"380px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-options.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"310px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-performance.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"240px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-slideshow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"170px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-youtube.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"520px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-vimeo.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"450px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-html5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"380px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-ios.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"310px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-android.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7800\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"240px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/feature-wordpress.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"8000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"170px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"4","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-b-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"intorducing","media":"text","type":"p","imageId":"","image":"","html":"introducing","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-50\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"44%","left":"50%","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"parallax layers","media":"text","type":"p","imageId":"","image":"","html":"PARALLAX LAYERS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"250\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-50\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"50%","left":"50%","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"bokeh","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-b-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"120%\\\",\\\"height\\\":\\\"auto\\\"}","top":"30%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants bg","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-b-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"353px","left":"237px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants far","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-b-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"453px","left":"483px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants mid","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-b-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{}","top":"456px","left":"586px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants close","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/slide-b-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"7\\\"}","url":"","target":"_self","styles":"{}","top":"421px","left":"659px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"move your mouse","media":"text","type":"p","imageId":"","image":"","html":"Move your mouse<br>\r\nover this slide!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"35\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"47%","left":"690","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"mouse","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/mouse.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"45%","left":"585px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"fancy parallax effect","media":"text","type":"p","imageId":"","image":"","html":"FANCY PARALLAX EFFECT","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-1\\\",\\\"transformoriginin\\\":\\\"left bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"right bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#849e00\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"560px","left":"50px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"by mouse move","media":"text","type":"p","imageId":"","image":"","html":"by mouse move","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"right top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"600px","left":"50px","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"11","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/bg51.jpg","thumbnailId":"","thumbnail":"","slidedelay":"5500","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"blur bg","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/bg31.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.1\\\",\\\"scaleyin\\\":\\\"1.1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"embeddig videos?","media":"text","type":"p","imageId":"","image":"","html":"embedding videos?","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-70\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"70\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"50%","left":"50%","style":"font-weight: 300; background: white; background: rgba(255,255,255,.2);","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Glass","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"20\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% -150\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"-20\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% -150\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"660px\\\",\\\"height\\\":\\\"380px\\\"}","top":"100px","left":"50%","style":"background: white; background: rgba(255,255,255,.2); box-shadow: 0px 5px 70px -20px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Video","media":"html","type":"p","imageId":"","image":"","html":"<iframe src=\\\"\/\/player.vimeo.com\/video\/15069551?title=0&byline=0&portrait=0&color=f75402\\\" width=\\\"640\\\" height=\\\"360\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"20\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% -150\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"-20\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% -150\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"110px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"youtube","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/youtube-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-180\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"360\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"35%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"vimeo","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/vimeo-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2550\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-270\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"270\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"html5","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/html5-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2600\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"180\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"65%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat","media":"text","type":"p","imageId":"","image":"","html":"video","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"35%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat 2","media":"text","type":"p","imageId":"","image":"","html":"video","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3350\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"50%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat 3","media":"text","type":"p","imageId":"","image":"","html":"video + audio","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3400\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"65%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"rich media support","media":"text","type":"p","imageId":"","image":"","html":"RICH MEDIA SUPPORT ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"30px","left":"30px","style":"font-weight: 300; background: black; background: rgba(0,0,0,.2);","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with optional autoplay","media":"text","type":"p","imageId":"","image":"","html":"WITH OPTIONAL AUTOPLAY","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"-60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"30px","left":"835px","style":"font-weight: 300; background: black; background: rgba(0,0,0,.2);","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"21,105","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/bg6b.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"circle","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/circle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"circle 2","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/circle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"&","media":"text","type":"p","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"200px\\\",\\\"color\\\":\\\"#f06a52\\\"}","top":"334px","left":"56px","style":"font-weight: 300; opacity: .4","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"all these features","media":"text","type":"p","imageId":"","image":"","html":"ALL THESE FEATURES","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"420px","left":"20px","style":"font-weight: 300; background: white; background: rgba(255,255,255,.85)","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"much more!","media":"text","type":"p","imageId":"","image":"","html":"much more!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"-60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"460px","left":"173px","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"to create","media":"text","type":"p","imageId":"","image":"","html":"...to create","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"right bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"right bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"420px","left":"1113px","style":"font-weight: 500; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"the best slider","media":"text","type":"p","imageId":"","image":"","html":"THE BEST SLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3250\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"90\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"260px\\\",\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f06a52\\\"}","top":"460px","left":"990px","style":"font-weight: 300; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with no compromises","media":"text","type":"p","imageId":"","image":"","html":"with no compromises!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.5\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#d9482b\\\"}","top":"505px","left":"983px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"ls5box","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/ls5box.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"180px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"other demo sliders","media":"text","type":"p","imageId":"","image":"","html":"Please check the other demo sliders","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"24px\\\",\\\"color\\\":\\\"#9c8b9c\\\"}","top":"28px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow up","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/arrow-up.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"9px","left":"837px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"post_type":["attachment"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Full width demo slider","width":"100%","height":"500px","maxwidth":"","forceresponsive":"on","responsiveunder":"1280","sublayercontainer":"1280","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"noskin","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"salad side","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/s1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"300\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-50\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"220\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"280px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad side close blur","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/s2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"30\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".9\\\",\\\"scaleyin\\\":\\\".9\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"300\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom  0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"230px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/s2.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"250\\\",\\\"durationin\\\":\\\"950\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-8\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"270\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"65%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/s1.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".7\\\",\\\"scaleyin\\\":\\\".7\\\",\\\"offsetxout\\\":\\\"-800\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"195px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"freas features","media":"text","type":"p","imageId":"","image":"","html":"FRESH FEATURES","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#82d10c\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"150px","left":"116px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for starter","media":"text","type":"p","imageId":"","image":"","html":"for starter","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#6db509\\\"}","top":"190px","left":"125px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-40\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-40\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#3","target":"_self","styles":"{}","top":"460px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#2","target":"_self","styles":"{}","top":"460px","left":"650px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"lamb far","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/l1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"157px","left":"284px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb middle","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/l2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"600\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"20px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb close","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/l3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"900\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-900\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"564px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"spicy parallax","media":"text","type":"p","imageId":"","image":"","html":"SPICY PARALLAX EFFECT","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"10\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f04705\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"170px","left":"174px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for main course","media":"text","type":"p","imageId":"","image":"","html":"for main course","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#f04705\\\"}","top":"210px","left":"183px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"#1","target":"_self","styles":"{}","top":"430px","left":"210px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"#3","target":"_self","styles":"{}","top":"430px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"cake far","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/d1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"129px","left":"487px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cake close","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/d2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"104px","left":"70px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"sweet transitions","media":"text","type":"p","imageId":"","image":"","html":"SWEET TRANSITIONS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#544f8c\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"320px","left":"830px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for dessert","media":"text","type":"p","imageId":"","image":"","html":"for dessert","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#544f8c\\\"}","top":"360px","left":"836px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#2","target":"_self","styles":"{}","top":"430px","left":"960px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/themes\/codeus\/plugins\/LayerSlider\/\/sampleslider\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#1","target":"_self","styles":"{}","top":"430px","left":"1000px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"title":"Carousel demo","width":"1280","height":"720","responsive":"on","responsiveunder":"0","sublayercontainer":"0","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","twowayslideshow":"on","loops":"0","forceloopnum":"on","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","keybnav":"on","touchnav":"on","skin":"carousel","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 50px;","navprevnext":"on","navbuttons":"on","thumb_nav":"always","thumb_width":"100","thumb_height":"60","thumb_container_width":"60%","thumb_active_opacity":"35","thumb_inactive_opacity":"100","imgpreload":"on","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/tablet.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":"","backgroundId":"","thumbnailId":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $499","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"70%","left":"25%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"63%","left":"25%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""}]},{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/computer.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":"","backgroundId":"","thumbnailId":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $1299","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"80%","left":"20%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"73%","left":"20%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""}]},{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/phone.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":"","backgroundId":"","thumbnailId":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $199","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"50%","left":"80%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"43%","left":"80%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""}]}]},{"properties":{"post_type":["attachment"],"post_categories":["1"],"post_tags":["19"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Fresh and Juicy","width":"100%","height":"500px","maxwidth":"","forceresponsive":"on","responsiveunder":"1200","sublayercontainer":"1200","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"noskin","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"salad side","media":"img","type":"p","imageId":"3664","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/s31.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"300\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-50\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"220\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"230px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad side close blur","media":"img","type":"p","imageId":"3665","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/s41.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"30\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".9\\\",\\\"scaleyin\\\":\\\".9\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"300\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom  0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"230","left":"-554px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"3637","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/s2.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"250\\\",\\\"durationin\\\":\\\"950\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-8\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"270\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"65%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"3636","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/s1.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".7\\\",\\\"scaleyin\\\":\\\".7\\\",\\\"offsetxout\\\":\\\"-800\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"195px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"100% Vitamins","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"75px\\\",\\\"line-height\\\":\\\"75px\\\",\\\"color\\\":\\\"#ff3f51\\\"}","top":"75px","left":"0","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"For Your Website","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"55px\\\",\\\"line-height\\\":\\\"55px\\\",\\\"color\\\":\\\"#6fc037\\\"}","top":"170px","left":"0","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 3","media":"text","type":"p","imageId":"","image":"","html":"with natural sweet taste<br \/>of Codeus! ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"38px\\\",\\\"color\\\":\\\"#3f4253\\\"}","top":"245px","left":"0","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"lamb far","media":"img","type":"p","imageId":"3635","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/l1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"157px","left":"284px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb middle","media":"img","type":"p","imageId":"3633","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/l22.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"600\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"20px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb close","media":"img","type":"p","imageId":"3634","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/l32.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"900\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-900\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"564px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"Juicy","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"75px\\\",\\\"line-height\\\":\\\"75px\\\",\\\"color\\\":\\\"#ff3f51\\\"}","top":"75px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"Eyecatcher","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"75px\\\",\\\"line-height\\\":\\\"75px\\\",\\\"color\\\":\\\"#6dc500\\\"}","top":"150px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 3","media":"text","type":"p","imageId":"","image":"","html":"and candy look for<br\/>your visitors! ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-left\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"38px\\\",\\\"color\\\":\\\"#3f4253\\\"}","top":"245px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/codex-themes.com\/codeus\/wp-content\/plugins\/LayerSlider\/\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"cake far","media":"img","type":"p","imageId":"3660","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/d11.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"129px","left":"487px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cake close","media":"img","type":"p","imageId":"3658","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/d22.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"-10px","left":"70px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"Dynamic<br\/>\r\n<span style=\\\"color: #6dc500;\\\">Fresh<\/span> <span style=\\\"color: #ff9700;\\\">Vital<\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"320px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"75px\\\",\\\"line-height\\\":\\\"75px\\\",\\\"color\\\":\\\"#ff3f51\\\"}","top":"157px","left":"850px","style":"text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"ingredients for<br\/>your webpages!\r\n","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"320px\\\",\\\"padding-right\\\":\\\"15px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"38px\\\",\\\"color\\\":\\\"#3f4253\\\"}","top":"303px","left":"850px","style":"text-align: right;","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"post_type":["team"],"post_categories":["1"],"post_tags":["19"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Carousel product","width":"100%","height":"540","responsive":"on","maxwidth":"","responsiveunder":"890","sublayercontainer":"0","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","twowayslideshow":"on","skin":"noskin","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 50px;","navprevnext":"on","navbuttons":"on","thumb_nav":"always","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"100","thumb_inactive_opacity":"35","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"3812","thumbnail":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Camera.jpg","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Picture","media":"img","type":"h6","imageId":"3812","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Camera.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"75px","left":"190px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"Instagrammus","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-right\\\":\\\"35px\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"65px\\\",\\\"line-height\\\":\\\"103px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#3b3e4f\\\"}","top":"0","left":"530px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"Price: $ 999","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"0\\\",\\\"padding-right\\\":\\\"35px\\\",\\\"padding-bottom\\\":\\\"0\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"35px\\\",\\\"line-height\\\":\\\"65px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#dd4539\\\"}","top":"103px","left":"741px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"3813","thumbnail":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Phone.jpg","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Picture","media":"img","type":"h6","imageId":"3813","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Phone.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"800px\\\",\\\"height\\\":\\\"auto\\\"}","top":"10px","left":"300px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"Skypeus","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-right\\\":\\\"35px\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"65px\\\",\\\"line-height\\\":\\\"103px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#3b3e4f\\\"}","top":"0","left":"180px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"Price: $ 699","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"0\\\",\\\"padding-right\\\":\\\"35px\\\",\\\"padding-bottom\\\":\\\"0\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"35px\\\",\\\"line-height\\\":\\\"65px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f18e1a\\\"}","top":"103px","left":"180px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"3814","thumbnail":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Projector.jpg","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Picture","media":"img","type":"h6","imageId":"3814","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Projector.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"525px\\\",\\\"height\\\":\\\"auto\\\"}","top":"-25px","left":"550px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"YouTubus","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-right\\\":\\\"35px\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"65px\\\",\\\"line-height\\\":\\\"103px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#3b3e4f\\\"}","top":"250px","left":"180px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"Price: on request","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"0\\\",\\\"padding-right\\\":\\\"35px\\\",\\\"padding-bottom\\\":\\\"0\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"35px\\\",\\\"line-height\\\":\\\"65px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#7fc74c\\\"}","top":"353px","left":"180px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"3815","thumbnail":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Recorder.jpg","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Picture","media":"img","type":"h6","imageId":"3815","image":"http:\/\/codex-themes.com\/codeus\/wp-content\/uploads\/2014\/02\/Product_Showcase_Recorder.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"10px","left":"180px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 1","media":"text","type":"p","imageId":"","image":"","html":"Q-Base","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-right\\\":\\\"35px\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"65px\\\",\\\"line-height\\\":\\\"103px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#3b3e4f\\\"}","top":"250px","left":"687px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Text 2","media":"text","type":"p","imageId":"","image":"","html":"Price: $ 99","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-30\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".1\\\",\\\"scaleyin\\\":\\\".1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".1\\\",\\\"scaleyout\\\":\\\".1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"0\\\",\\\"padding-right\\\":\\\"35px\\\",\\\"padding-bottom\\\":\\\"0\\\",\\\"padding-left\\\":\\\"35px\\\",\\\"font-family\\\":\\\"Aileron UltraLight\\\",\\\"font-size\\\":\\\"35px\\\",\\\"line-height\\\":\\\"65px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#1fb197\\\"}","top":"353px","left":"740px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]}]